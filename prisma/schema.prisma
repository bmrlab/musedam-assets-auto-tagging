generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/client"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Team {
  id   Int    @id @default(autoincrement())
  name String @default("") @db.VarChar(255)
  slug String @unique @db.VarChar(64)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  memberships       Membership[]
  assetTags         AssetTag[]
  assetObjects      AssetObject[]
  taggingQueueItems TaggingQueueItem[]
  taggingAuditItems TaggingAuditItem[]
  configs           TeamConfig[]
}

model User {
  id   Int    @id @default(autoincrement())
  name String @default("") @db.VarChar(255)
  slug String @unique @db.VarChar(64)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  memberships Membership[]
}

model Membership {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId Int  @unique
  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@unique([userId, teamId])
}

model TeamConfig {
  id     Int    @id @default(autoincrement())
  teamId Int
  team   Team   @relation(fields: [teamId], references: [id])
  key    String @db.VarChar(255)
  value  Json   @default("{}")

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@unique([teamId, key])
}

model AssetObject {
  id               Int    @id @default(autoincrement())
  teamId           Int
  team             Team   @relation(fields: [teamId], references: [id])
  slug             String @unique @db.VarChar(64)
  materializedPath String
  name             String
  description      String
  tags             Json   @default("[]") // string[]
  content          Json   @default("{}") // Record<string, string>
  extra            Json   @default("{}")

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  taggingQueueItems TaggingQueueItem[]
  taggingAuditItems TaggingAuditItem[]
}

model AssetTag {
  id     Int  @id @default(autoincrement())
  teamId Int
  team   Team @relation(fields: [teamId], references: [id])

  name     String     @db.VarChar(100)
  slug     String?    @db.VarChar(64) // 新增以后还不存在 slug，和 musedam 同步以后会有
  level    Int        @default(1) // 层级: 1, 2, 3
  parentId Int?
  parent   AssetTag?  @relation("TagHierarchy", fields: [parentId], references: [id])
  children AssetTag[] @relation("TagHierarchy")
  extra    Json       @default("{}")

  createdAt         DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime           @updatedAt @db.Timestamptz(6)
  taggingAuditItems TaggingAuditItem[]

  // ⚠️ migration.sql 里人工添加了一条 unique 索引，在 parentId 为空的时候，需要确保 teamId,name 唯一
  //    CREATE UNIQUE INDEX "AssetTag_teamId_name_key" ON "public"."AssetTag"("teamId", "name") WHERE "parentId" IS NULL;
  // Prisma 不支持这种类型的 unique 索引定义，智能人工添加
  //    目前这样不会导致 Prisma 判断 migration 和 schema 不同步，所以问题不大
  //    如果之后 squash migration，需要再次人工添加上面这个 sql
  @@unique([teamId, parentId, name])
}

enum TaggingQueueStatus {
  pending
  processing
  completed
  failed
}

model TaggingQueueItem {
  id            Int                @id @default(autoincrement())
  teamId        Int
  team          Team               @relation(fields: [teamId], references: [id])
  assetObjectId Int?
  assetObject   AssetObject?       @relation(fields: [assetObjectId], references: [id], onDelete: SetNull)
  status        TaggingQueueStatus
  startsAt      DateTime?          @db.Timestamptz(6)
  endsAt        DateTime?          @db.Timestamptz(6)
  result        Json               @default("{}")
  extra         Json               @default("{}")

  createdAt         DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime           @updatedAt @db.Timestamptz(6)
  taggingAuditItems TaggingAuditItem[]

  @@index([teamId, status])
}

enum TaggingAuditStatus {
  pending
  approved
  rejected
}

model TaggingAuditItem {
  id            Int                @id @default(autoincrement())
  teamId        Int
  team          Team               @relation(fields: [teamId], references: [id])
  assetObjectId Int?
  assetObject   AssetObject?       @relation(fields: [assetObjectId], references: [id], onDelete: SetNull)
  status        TaggingAuditStatus
  score         Int
  tagPath       Json               @default("[]")
  leafTagId     Int?
  leafTag       AssetTag?          @relation(fields: [leafTagId], references: [id], onDelete: SetNull)
  queueItemId   Int?
  queueItem     TaggingQueueItem?  @relation(fields: [queueItemId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@index([teamId, status])
}
